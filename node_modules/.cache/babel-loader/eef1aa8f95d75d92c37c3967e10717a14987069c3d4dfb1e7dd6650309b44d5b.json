{"ast":null,"code":"var _jsxFileName = \"/Users/micinfo/Documents/PROJECT/mic/learning/word-search/src/components/WordGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordGrid = ({\n  words,\n  onWordFound,\n  hintedWord\n}) => {\n  _s();\n  const gridSize = 15;\n  const [grid, setGrid] = useState(createInitialGrid());\n  const [foundWordPositions, setFoundWordPositions] = useState(new Map());\n  const handleWordFound = (word, positions) => {\n    const newGrid = grid.map(row => [...row]);\n    const wordIndex = words.indexOf(word);\n    positions.forEach(pos => {\n      newGrid[pos.row][pos.col].foundWordIndex = wordIndex;\n    });\n    setGrid(newGrid);\n    setFoundWordPositions(new Map(foundWordPositions.set(word, positions)));\n    onWordFound(word);\n  };\n  const handleCellClick = (rowIndex, colIndex) => {\n    const newSelection = [...selection, {\n      row: rowIndex,\n      col: colIndex\n    }];\n    setSelection(newSelection);\n    const selectedWord = newSelection.map(pos => grid[pos.row][pos.col].letter).join('');\n    if (words.includes(selectedWord)) {\n      handleWordFound(selectedWord, newSelection);\n      setSelection([]);\n    } else if (newSelection.length >= 10) {\n      setSelection([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-cell \n                  ${selection.some(pos => pos.row === rowIndex && pos.col === colIndex) ? 'selected' : ''}\n                  ${cell.foundWordIndex !== undefined ? `found-word-${cell.foundWordIndex % 5 + 1}` : ''}\n                  ${hintedWord && cell.isPartOfHint ? 'hinted' : ''}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cell.letter\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(WordGrid, \"ZSzUiALNgc+6WI2ySjl5CfbviJE=\");\n_c = WordGrid;\nexport default WordGrid;\nvar _c;\n$RefreshReg$(_c, \"WordGrid\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WordGrid","words","onWordFound","hintedWord","_s","gridSize","grid","setGrid","createInitialGrid","foundWordPositions","setFoundWordPositions","Map","handleWordFound","word","positions","newGrid","map","row","wordIndex","indexOf","forEach","pos","col","foundWordIndex","set","handleCellClick","rowIndex","colIndex","newSelection","selection","setSelection","selectedWord","letter","join","includes","length","className","children","cell","some","undefined","isPartOfHint","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/micinfo/Documents/PROJECT/mic/learning/word-search/src/components/WordGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface Position {\n  row: number;\n  col: number;\n}\n\nconst WordGrid: React.FC<WordGridProps> = ({ words, onWordFound, hintedWord }) => {\n  const gridSize = 15;\n  const [grid, setGrid] = useState<Cell[][]>(createInitialGrid());\n  const [foundWordPositions, setFoundWordPositions] = useState<Map<string, Position[]>>(new Map());\n\n  const handleWordFound = (word: string, positions: Position[]) => {\n    const newGrid = grid.map(row => [...row]);\n    const wordIndex = words.indexOf(word);\n    \n    positions.forEach(pos => {\n      newGrid[pos.row][pos.col].foundWordIndex = wordIndex;\n    });\n    \n    setGrid(newGrid);\n    setFoundWordPositions(new Map(foundWordPositions.set(word, positions)));\n    onWordFound(word);\n  };\n\n  const handleCellClick = (rowIndex: number, colIndex: number): void => {\n    const newSelection = [...selection, { row: rowIndex, col: colIndex }];\n    setSelection(newSelection);\n\n    const selectedWord = newSelection\n      .map(pos => grid[pos.row][pos.col].letter)\n      .join('');\n\n    if (words.includes(selectedWord)) {\n      handleWordFound(selectedWord, newSelection);\n      setSelection([]);\n    } else if (newSelection.length >= 10) {\n      setSelection([]);\n    }\n  };\n\n  return (\n    <div className=\"word-grid\">\n      <div className=\"grid-container\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`grid-cell \n                  ${selection.some((pos: Position) => pos.row === rowIndex && pos.col === colIndex)\n                    ? 'selected'\n                    : ''}\n                  ${cell.foundWordIndex !== undefined \n                    ? `found-word-${cell.foundWordIndex % 5 + 1}` \n                    : ''}\n                  ${hintedWord && cell.isPartOfHint ? 'hinted' : ''}`\n                }\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cell.letter}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default WordGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}