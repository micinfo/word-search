{"ast":null,"code":"var _jsxFileName = \"/Users/micinfo/Documents/PROJECT/mic/learning/word-search/src/components/WordGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordGrid = ({\n  words,\n  onWordFound,\n  hintedWord\n}) => {\n  _s();\n  const gridSize = 15;\n  const [grid, setGrid] = useState(createInitialGrid());\n  function createInitialGrid() {\n    return Array(gridSize).fill(null).map(() => Array(gridSize).fill(null).map(() => ({\n      letter: String.fromCharCode(65 + Math.floor(Math.random() * 26)),\n      selected: false\n    })));\n  }\n  useEffect(() => {\n    const newGrid = createInitialGrid();\n    words.forEach(word => {\n      let placed = false;\n      let attempts = 0;\n      while (!placed && attempts < 100) {\n        const direction = Math.floor(Math.random() * 3); // 0: horizontal, 1: vertical, 2: diagonal\n        const startX = Math.floor(Math.random() * (gridSize - word.length));\n        const startY = Math.floor(Math.random() * (gridSize - word.length));\n        if (canPlaceWord(newGrid, word, startX, startY, direction)) {\n          placeWord(newGrid, word, startX, startY, direction);\n          placed = true;\n        }\n        attempts++;\n      }\n    });\n    setGrid(newGrid);\n  }, [words]);\n  const canPlaceWord = (grid, word, x, y, direction) => {\n    const dx = direction === 0 ? 1 : direction === 2 ? 1 : 0;\n    const dy = direction === 1 ? 1 : direction === 2 ? 1 : 0;\n    if (x + dx * word.length > gridSize || y + dy * word.length > gridSize) {\n      return false;\n    }\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      const currentCell = grid[currentY][currentX];\n      if (currentCell.letter !== word[i] && currentCell.letter !== '') {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, word, x, y, direction) => {\n    const dx = direction === 0 ? 1 : direction === 2 ? 1 : 0;\n    const dy = direction === 1 ? 1 : direction === 2 ? 1 : 0;\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      grid[currentY][currentX].letter = word[i];\n    }\n  };\n  const [selection, setSelection] = useState([]);\n  const handleCellClick = (rowIndex, colIndex) => {\n    const newSelection = [...selection, {\n      row: rowIndex,\n      col: colIndex\n    }];\n    setSelection(newSelection);\n    const selectedWord = newSelection.map(pos => grid[pos.row][pos.col].letter).join('');\n    if (words.includes(selectedWord)) {\n      onWordFound(selectedWord);\n      setSelection([]);\n    } else if (newSelection.length >= 10) {\n      // Reset if selection is too long\n      setSelection([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-cell ${selection.some(pos => pos.row === rowIndex && pos.col === colIndex) ? 'selected' : ''} ${hintedWord && cell.isPartOfHint ? 'hinted' : ''}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cell.letter\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(WordGrid, \"ClZudY04qjp27WjkuR627KyILVk=\");\n_c = WordGrid;\nexport default WordGrid;\nvar _c;\n$RefreshReg$(_c, \"WordGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordGrid","words","onWordFound","hintedWord","_s","gridSize","grid","setGrid","createInitialGrid","Array","fill","map","letter","String","fromCharCode","Math","floor","random","selected","newGrid","forEach","word","placed","attempts","direction","startX","length","startY","canPlaceWord","placeWord","x","y","dx","dy","i","currentX","currentY","currentCell","selection","setSelection","handleCellClick","rowIndex","colIndex","newSelection","row","col","selectedWord","pos","join","includes","className","children","cell","some","isPartOfHint","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/micinfo/Documents/PROJECT/mic/learning/word-search/src/components/WordGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface Cell {\n  letter: string;\n  selected: boolean;\n}\n\ninterface Position {\n  row: number;\n  col: number;\n}\n\ninterface WordGridProps {\n  words: string[];\n  onWordFound: (word: string) => void;\n  hintedWord?: string; // Add this new prop\n}\n\nconst WordGrid: React.FC<WordGridProps> = ({ words, onWordFound, hintedWord }) => {\n  const gridSize = 15;\n  const [grid, setGrid] = useState<Cell[][]>(createInitialGrid());\n\n  function createInitialGrid(): Cell[][] {\n    return Array(gridSize).fill(null).map(() =>\n      Array(gridSize).fill(null).map(() => ({\n        letter: String.fromCharCode(65 + Math.floor(Math.random() * 26)),\n        selected: false\n      }))\n    );\n  }\n\n  useEffect(() => {\n    const newGrid = createInitialGrid();\n    words.forEach(word => {\n      let placed = false;\n      let attempts = 0;\n      while (!placed && attempts < 100) {\n        const direction = Math.floor(Math.random() * 3); // 0: horizontal, 1: vertical, 2: diagonal\n        const startX = Math.floor(Math.random() * (gridSize - word.length));\n        const startY = Math.floor(Math.random() * (gridSize - word.length));\n        \n        if (canPlaceWord(newGrid, word, startX, startY, direction)) {\n          placeWord(newGrid, word, startX, startY, direction);\n          placed = true;\n        }\n        attempts++;\n      }\n    });\n    setGrid(newGrid);\n  }, [words]);\n\n  const canPlaceWord = (grid: Cell[][], word: string, x: number, y: number, direction: number): boolean => {\n    const dx = direction === 0 ? 1 : direction === 2 ? 1 : 0;\n    const dy = direction === 1 ? 1 : direction === 2 ? 1 : 0;\n\n    if (x + dx * word.length > gridSize || y + dy * word.length > gridSize) {\n      return false;\n    }\n\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      const currentCell = grid[currentY][currentX];\n      if (currentCell.letter !== word[i] && currentCell.letter !== '') {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const placeWord = (grid: Cell[][], word: string, x: number, y: number, direction: number): void => {\n    const dx = direction === 0 ? 1 : direction === 2 ? 1 : 0;\n    const dy = direction === 1 ? 1 : direction === 2 ? 1 : 0;\n\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      grid[currentY][currentX].letter = word[i];\n    }\n  };\n\n  const [selection, setSelection] = useState<Position[]>([]);\n\n  const handleCellClick = (rowIndex: number, colIndex: number): void => {\n    const newSelection = [...selection, { row: rowIndex, col: colIndex }];\n    setSelection(newSelection);\n\n    const selectedWord = newSelection\n      .map(pos => grid[pos.row][pos.col].letter)\n      .join('');\n\n    if (words.includes(selectedWord)) {\n      onWordFound(selectedWord);\n      setSelection([]);\n    } else if (newSelection.length >= 10) { // Reset if selection is too long\n      setSelection([]);\n    }\n  };\n\n  return (\n    <div className=\"word-grid\">\n      <div className=\"grid-container\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`grid-cell ${\n                  selection.some(pos => pos.row === rowIndex && pos.col === colIndex)\n                    ? 'selected'\n                    : ''\n                } ${\n                  hintedWord && cell.isPartOfHint ? 'hinted' : ''\n                }`}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cell.letter}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default WordGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}