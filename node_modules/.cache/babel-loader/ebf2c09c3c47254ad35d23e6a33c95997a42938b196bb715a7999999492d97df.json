{"ast":null,"code":"var _jsxFileName = \"/Users/micinfo/Documents/PROJECT/mic/learning/word-search/src/components/WordGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordGrid = ({\n  words,\n  onWordFound,\n  hintedWord\n}) => {\n  _s();\n  const gridSize = 12;\n  function createInitialGrid() {\n    return Array(gridSize).fill(null).map(() => Array(gridSize).fill(null).map(() => ({\n      letter: '',\n      selected: false,\n      isPartOfHint: false\n    })));\n  }\n  const [grid, setGrid] = useState(createInitialGrid());\n  const [selection, setSelection] = useState([]);\n  const directions = [[1, 0],\n  // horizontal\n  [0, 1],\n  // vertical\n  [1, 1],\n  // diagonal down-right\n  [-1, 1] // diagonal up-right\n  ];\n  const canPlaceWord = (grid, word, x, y, dx, dy) => {\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      if (currentX < 0 || currentX >= gridSize || currentY < 0 || currentY >= gridSize) {\n        return false;\n      }\n      const currentCell = grid[currentY][currentX];\n      if (currentCell.letter && currentCell.letter !== word[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, word, x, y, dx, dy) => {\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      grid[currentY][currentX] = {\n        letter: word[i],\n        selected: false,\n        isPartOfHint: false\n      };\n    }\n  };\n  useEffect(() => {\n    const newGrid = createInitialGrid();\n    const sortedWords = [...words].sort((a, b) => b.length - a.length);\n    sortedWords.forEach(word => {\n      let placed = false;\n      let attempts = 0;\n      while (!placed && attempts < 100) {\n        const directionIndex = Math.floor(Math.random() * directions.length);\n        const [dx, dy] = directions[directionIndex];\n        const maxX = dx < 0 ? gridSize - 1 : gridSize - dx * word.length;\n        const minX = dx < 0 ? word.length - 1 : 0;\n        const maxY = gridSize - Math.max(0, dy) * word.length;\n        const startX = minX + Math.floor(Math.random() * (maxX - minX));\n        const startY = Math.floor(Math.random() * maxY);\n        if (canPlaceWord(newGrid, word, startX, startY, dx, dy)) {\n          placeWord(newGrid, word, startX, startY, dx, dy);\n          placed = true;\n        }\n        attempts++;\n      }\n    });\n\n    // Fill remaining empty cells with random letters\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize; x++) {\n        if (!newGrid[y][x].letter) {\n          newGrid[y][x].letter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n    setGrid(newGrid);\n  }, [words]);\n  const handleCellClick = (rowIndex, colIndex) => {\n    const newSelection = [...selection, {\n      row: rowIndex,\n      col: colIndex\n    }];\n    setSelection(newSelection);\n    const selectedWord = newSelection.map(pos => grid[pos.row][pos.col].letter).join('');\n    if (words.includes(selectedWord)) {\n      onWordFound(selectedWord);\n      setSelection([]);\n    } else if (newSelection.length >= 10) {\n      // Reset if selection is too long\n      setSelection([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-cell ${selection.some(pos => pos.row === rowIndex && pos.col === colIndex) ? 'selected' : ''} ${hintedWord && cell.isPartOfHint ? 'hinted' : ''}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cell.letter\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(WordGrid, \"LSV+zFlsQTMWNE6X7llQ485WV0w=\");\n_c = WordGrid;\nexport default WordGrid;\nvar _c;\n$RefreshReg$(_c, \"WordGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordGrid","words","onWordFound","hintedWord","_s","gridSize","createInitialGrid","Array","fill","map","letter","selected","isPartOfHint","grid","setGrid","selection","setSelection","directions","canPlaceWord","word","x","y","dx","dy","i","length","currentX","currentY","currentCell","placeWord","newGrid","sortedWords","sort","a","b","forEach","placed","attempts","directionIndex","Math","floor","random","maxX","minX","maxY","max","startX","startY","String","fromCharCode","handleCellClick","rowIndex","colIndex","newSelection","row","col","selectedWord","pos","join","includes","className","children","cell","some","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/micinfo/Documents/PROJECT/mic/learning/word-search/src/components/WordGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface Position {\n  row: number;\n  col: number;\n}\n\ninterface Cell {\n  letter: string;\n  selected: boolean;\n  isPartOfHint?: boolean;\n}\n\ninterface WordGridProps {\n  words: string[];\n  onWordFound: (word: string) => void;\n  hintedWord?: string;\n}\n\nconst WordGrid: React.FC<WordGridProps> = ({ words, onWordFound, hintedWord }) => {\n  const gridSize = 12;\n\n  function createInitialGrid(): Cell[][] {\n    return Array(gridSize).fill(null).map(() =>\n      Array(gridSize).fill(null).map(() => ({\n        letter: '',\n        selected: false,\n        isPartOfHint: false\n      }))\n    );\n  }\n\n  const [grid, setGrid] = useState<Cell[][]>(createInitialGrid());\n  const [selection, setSelection] = useState<Position[]>([]);\n\n  const directions = [\n    [1, 0],   // horizontal\n    [0, 1],   // vertical\n    [1, 1],   // diagonal down-right\n    [-1, 1],  // diagonal up-right\n  ];\n\n  const canPlaceWord = (grid: Cell[][], word: string, x: number, y: number, dx: number, dy: number): boolean => {\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      \n      if (currentX < 0 || currentX >= gridSize || currentY < 0 || currentY >= gridSize) {\n        return false;\n      }\n      \n      const currentCell = grid[currentY][currentX];\n      if (currentCell.letter && currentCell.letter !== word[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const placeWord = (grid: Cell[][], word: string, x: number, y: number, dx: number, dy: number): void => {\n    for (let i = 0; i < word.length; i++) {\n      const currentX = x + dx * i;\n      const currentY = y + dy * i;\n      grid[currentY][currentX] = {\n        letter: word[i],\n        selected: false,\n        isPartOfHint: false\n      };\n    }\n  };\n\n  useEffect(() => {\n    const newGrid = createInitialGrid();\n    const sortedWords = [...words].sort((a, b) => b.length - a.length);\n\n    sortedWords.forEach(word => {\n      let placed = false;\n      let attempts = 0;\n      \n      while (!placed && attempts < 100) {\n        const directionIndex = Math.floor(Math.random() * directions.length);\n        const [dx, dy] = directions[directionIndex];\n        \n        const maxX = dx < 0 ? gridSize - 1 : gridSize - (dx * word.length);\n        const minX = dx < 0 ? word.length - 1 : 0;\n        const maxY = gridSize - (Math.max(0, dy) * word.length);\n        \n        const startX = minX + Math.floor(Math.random() * (maxX - minX));\n        const startY = Math.floor(Math.random() * maxY);\n\n        if (canPlaceWord(newGrid, word, startX, startY, dx, dy)) {\n          placeWord(newGrid, word, startX, startY, dx, dy);\n          placed = true;\n        }\n        attempts++;\n      }\n    });\n\n    // Fill remaining empty cells with random letters\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize; x++) {\n        if (!newGrid[y][x].letter) {\n          newGrid[y][x].letter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n    \n    setGrid(newGrid);\n  }, [words]);\n\n  const handleCellClick = (rowIndex: number, colIndex: number): void => {\n    const newSelection = [...selection, { row: rowIndex, col: colIndex }];\n    setSelection(newSelection);\n\n    const selectedWord = newSelection\n      .map(pos => grid[pos.row][pos.col].letter)\n      .join('');\n\n    if (words.includes(selectedWord)) {\n      onWordFound(selectedWord);\n      setSelection([]);\n    } else if (newSelection.length >= 10) { // Reset if selection is too long\n      setSelection([]);\n    }\n  };\n\n  return (\n    <div className=\"word-grid\">\n      <div className=\"grid-container\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`grid-cell ${\n                  selection.some(pos => pos.row === rowIndex && pos.col === colIndex)\n                    ? 'selected'\n                    : ''\n                } ${\n                  hintedWord && cell.isPartOfHint ? 'hinted' : ''\n                }`}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cell.letter}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default WordGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}